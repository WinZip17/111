{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Transformer","info","xmlToJSON","convert","compact","spaces","jsonToXML","ignoreComment","this","App","props","xml","currentTarget","form","value","result","setState","json","state","type","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TAKaA,EAET,WAAYC,GAAO,IAAD,gCAIlBC,UAAY,WACR,OAAOC,WAAiB,EAAKF,KAAM,CAACG,SAAS,EAAMC,OAAQ,KAL7C,KAQlBC,UAAY,WAER,OAAOH,WAAiB,EAAKF,KADf,CAACG,SAAS,EAAMG,eAAe,EAAMF,OAAQ,KAR3DG,KAAKP,KAAOA,GA+DLQ,E,YA5CX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAQVR,UAAY,SAACD,GACT,IAAIU,EAAMV,EAAKW,cAAcC,KAAK,GAAGC,MACjCC,EAAS,IAAIf,EAAYW,GAC7B,OAAO,EAAKK,SAAS,CAACD,OAAQA,EAAOb,UAAUS,MAZhC,EAgBnBL,UAAY,SAACL,GACT,IAAIgB,EAAOhB,EAAKW,cAAcC,KAAK,GAAGC,MAClCC,EAAS,IAAIf,EAAYiB,GAC7B,OAAO,EAAKD,SAAS,CAACD,OAAQA,EAAOT,UAAUW,MAjB/C,EAAKC,MAAQ,CACTH,OAAQ,IAHG,E,sEAwBnB,OACI,6BACE,2CACE,8BACI,mCACA,6BACA,4BAAQI,KAAK,SAASC,QAASZ,KAAKN,WAApC,eACA,6BAEA,4BAAQiB,KAAK,SAASC,QAASZ,KAAKF,WAApC,gBAGJ,6BACKE,KAAKU,MAAMH,a,GAvCVM,aCbEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b3bd2472.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport * as convert from \"xml-js\";\n\n\nexport class Transformer {\n\n    constructor(info) {\n        this.info = info;\n    };\n\n    xmlToJSON = () => {\n        return convert.xml2json(this.info, {compact: true, spaces: 4});\n    };\n\n    jsonToXML = () => {\n        var options = {compact: true, ignoreComment: true, spaces: 4};\n        return convert.json2xml(this.info, options);;\n    };\n\n}\n\n\n\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            result: ''\n        };\n    }\n\n\n\n    xmlToJSON = (info) => {\n        let xml = info.currentTarget.form[0].value;\n        let result = new Transformer(xml);\n        return this.setState({result: result.xmlToJSON(xml)})\n    };\n\n\n    jsonToXML = (info) => {\n        let json = info.currentTarget.form[0].value;\n        let result = new Transformer(json);\n        return this.setState({result: result.jsonToXML(json)})\n    };\n\n\n  render() {\n    return (\n        <div>\n          <h3>xml to json</h3>\n            <form>\n                <textarea></textarea>\n                <br/>\n                <button type=\"button\" onClick={this.xmlToJSON}>xml to json</button>\n                <br/>\n\n                <button type=\"button\" onClick={this.jsonToXML}>json to xml</button>\n            </form>\n\n            <div>\n                {this.state.result}\n            </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}