{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Transformer","info","xmlToJSON","xml","tab","X","toObj","o","nodeType","attributes","length","i","nodeName","nodeValue","toString","firstChild","textChild","cdataChild","hasElementChild","n","nextSibling","match","removeWhite","escape","Array","innerXml","documentElement","alert","toJson","name","ind","json","join","arr","m","node","s","innerHTML","asXml","c","txt","replace","e","normalize","nxt","removeChild","xml2json","dom","window","DOMParser","parseFromString","parseXml","jsonToXML","JSON","parse","toXml","v","hasChild","charAt","substr","this","App","props","currentTarget","form","value","result","setState","state","type","onClick","Component","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed255853.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport * as convert from \"xml-js\";\n\n\nexport class Transformer {\n\n    constructor(info) {\n        this.info = info;\n    };\n\n    xmlToJSON = () => {\n        // return convert.xml2json(this.info, {compact: true, spaces: 4});\n        var xml = this.info,\n            dom = parseXml(xml),\n            json = xml2json(dom);\n\n        function parseXml(xml) {\n            var dom = null;\n            if (window.DOMParser) {\n                try {\n                    dom = (new DOMParser()).parseFromString(xml, \"text/xml\");\n                }\n                catch (e) { dom = null; }\n            }\n            else\n                alert(\"cannot parse xml string!\");\n            return dom;\n        }\n\n        function xml2json(xml, tab = \"\") {\n            var X = {\n                toObj: (xml) => {\n                    var o = {};\n                    if (xml.nodeType==1) {   // element node ..\n                        if (xml.attributes.length)   // element with attributes  ..\n                            for (var i=0; i<xml.attributes.length; i++) {\n                                o[\"@\"+xml.attributes[i].nodeName] = (xml.attributes[i].nodeValue||\"\").toString();\n                            }\n                        if (xml.firstChild) { // element has child nodes ..\n                            var textChild=0, cdataChild=0, hasElementChild=false;\n                            for (var n=xml.firstChild; n; n=n.nextSibling) {\n                                if (n.nodeType==1) hasElementChild = true;\n                                else if (n.nodeType==3 && n.nodeValue.match(/[^ \\f\\n\\r\\t\\v]/)) textChild++; // non-whitespace text\n                                else if (n.nodeType==4) cdataChild++; // cdata section node\n                            }\n                            if (hasElementChild) {\n                                if (textChild < 2 && cdataChild < 2) { // structured element with evtl. a single text or/and cdata node ..\n                                    X.removeWhite(xml);\n                                    for (var n=xml.firstChild; n; n=n.nextSibling) {\n                                        if (n.nodeType == 3)  // text node\n                                            o[\"#text\"] = X.escape(n.nodeValue);\n                                        else if (n.nodeType == 4)  // cdata node\n                                            o[\"#cdata\"] = X.escape(n.nodeValue);\n                                        else if (o[n.nodeName]) {  // multiple occurence of element ..\n                                            if (o[n.nodeName] instanceof Array)\n                                                o[n.nodeName][o[n.nodeName].length] = X.toObj(n);\n                                            else\n                                                o[n.nodeName] = [o[n.nodeName], X.toObj(n)];\n                                        }\n                                        else  // first occurence of element..\n                                            o[n.nodeName] = X.toObj(n);\n                                    }\n                                }\n                                else { // mixed content\n                                    if (!xml.attributes.length) {\n                                        o = X.escape(X.innerXml(xml));\n                                    }\n                                    else\n                                        o[\"#text\"] = X.escape(X.innerXml(xml));\n                                }\n                            }\n                            else if (textChild) { // pure text\n                                if (!xml.attributes.length)\n                                    o = X.escape(X.innerXml(xml));\n                                else\n                                    o[\"#text\"] = X.escape(X.innerXml(xml));\n                            }\n                            else if (cdataChild) { // cdata\n                                if (cdataChild > 1)\n                                    o = X.escape(X.innerXml(xml));\n                                else\n                                    for (var n=xml.firstChild; n; n=n.nextSibling)\n                                        o[\"#cdata\"] = X.escape(n.nodeValue);\n                            }\n                        }\n                        if (!xml.attributes.length && !xml.firstChild) o = null;\n                    }\n                    else if (xml.nodeType==9) { // document.node\n                        o = X.toObj(xml.documentElement);\n                    }\n                    else\n                        alert(\"unhandled node type: \" + xml.nodeType);\n                    return o;\n                },\n                toJson: (o, name, ind) => {\n                    var json = name ? (\"\\\"\"+name+\"\\\"\") : \"\";\n                    if (o instanceof Array) {\n                        for (var i=0,n=o.length; i<n; i++)\n                            o[i] = X.toJson(o[i], \"\", ind+\"\\t\");\n                        json += (name?\":[\":\"[\") + (o.length > 1 ? (\"\\n\"+ind+\"\\t\"+o.join(\",\\n\"+ind+\"\\t\")+\"\\n\"+ind) : o.join(\"\")) + \"]\";\n                    }\n                    else if (o == null)\n                        json += (name&&\":\") + \"null\";\n                    else if (typeof(o) == \"object\") {\n                        var arr = [];\n                        for (var m in o)\n                            arr[arr.length] = X.toJson(o[m], m, ind+\"\\t\");\n                        json += (name?\":{\":\"{\") + (arr.length > 1 ? (\"\\n\"+ind+\"\\t\"+arr.join(\",\\n\"+ind+\"\\t\")+\"\\n\"+ind) : arr.join(\"\")) + \"}\";\n                    }\n                    else if (typeof(o) == \"string\")\n                        json += (name&&\":\") + \"\\\"\" + o.toString() + \"\\\"\";\n                    else\n                        json += (name&&\":\") + o.toString();\n                    return json;\n                },\n                innerXml: (node) => {\n                    debugger\n                    var s = \"\"\n                    if (\"innerHTML\" in node)\n                        s = node.innerHTML;\n                    else {\n                        var asXml = function(n) {\n                            var s = \"\";\n                            if (n.nodeType == 1) {\n                                s += \"<\" + n.nodeName;\n                                for (var i=0; i<n.attributes.length;i++)\n                                    s += \" \" + n.attributes[i].nodeName + \"=\\\"\" + (n.attributes[i].nodeValue||\"\").toString() + \"\\\"\";\n                                if (n.firstChild) {\n                                    s += \">\";\n                                    for (var c=n.firstChild; c; c=c.nextSibling)\n                                        s += asXml(c);\n                                    s += \"</\"+n.nodeName+\">\";\n                                }\n                                else\n                                    s += \"/>\";\n                            }\n                            else if (n.nodeType == 3)\n                                s += n.nodeValue;\n                            else if (n.nodeType == 4)\n                                s += \"<![CDATA[\" + n.nodeValue + \"]]>\";\n                            return s;\n                        };\n                        for (var c=node.firstChild; c; c=c.nextSibling)\n                            s += asXml(c);\n                    }\n                    return s;\n                },\n                escape: (txt) => {\n                    return txt.replace(/[\\\\]/g, \"\\\\\\\\\")\n                        .replace(/[\\\"]/g, '\\\\\"')\n                        .replace(/[\\n]/g, '\\\\n')\n                        .replace(/[\\r]/g, '\\\\r');\n                },\n                removeWhite: (e) => {\n                    e.normalize();\n                    for (var n = e.firstChild; n; ) {\n                        if (n.nodeType == 3) {  // text node\n                            if (!n.nodeValue.match(/[^ \\f\\n\\r\\t\\v]/)) { // pure whitespace text node\n                                var nxt = n.nextSibling;\n                                e.removeChild(n);\n                                n = nxt;\n                            }\n                            else\n                                n = n.nextSibling;\n                        }\n                        else if (n.nodeType == 1) {  // element node\n                            X.removeWhite(n);\n                            n = n.nextSibling;\n                        }\n                        else                      // any other node\n                            n = n.nextSibling;\n                    }\n                    return e;\n                }\n            };\n            if (xml.nodeType == 9) // document node\n                xml = xml.documentElement;\n            var json = X.toJson(X.toObj(X.removeWhite(xml)), xml.nodeName, \"\\t\");\n            return \"{\\n\" + tab + (tab ? json.replace(/\\t/g, tab) : json.replace(/\\t|\\n/g, \"\")) + \"\\n}\";\n        }\n        return json;\n    };\n\n    jsonToXML = () => {\n        // var options = {compact: true, ignoreComment: true, spaces: 4};\n        // return convert.json2xml(this.info, options);\n        var o = JSON.parse(this.info);\n        var toXml = function(v, name, ind) {\n            var xml = \"\";\n            if (v instanceof Array) {\n                debugger\n                for (var i=0, n=v.length; i<n; i++)\n                    xml += ind + toXml(v[i], name, ind+\"\\t\") + \"\\n\";\n            }\n            else if (typeof(v) == \"object\") {\n\n                var hasChild = false;\n                xml += ind + \"<\" + name;\n                for (var m in v) {\n                    if (m.charAt(0) == \"@\")\n                        xml += \" \" + m.substr(1) + \"=\\\"\" + v[m].toString() + \"\\\"\";\n                    else\n                        hasChild = true;\n                }\n                xml += hasChild ? \">\" : \"/>\";\n                if (hasChild) {\n                    for (var m in v) {\n                        if (m == \"#text\")\n                            xml += v[m];\n                        else if (m == \"#cdata\")\n                            xml += \"<![CDATA[\" + v[m] + \"]]>\";\n                        else if (m.charAt(0) != \"@\")\n                            xml += toXml(v[m], m, ind+\"\\t\");\n                    }\n                    xml += (xml.charAt(xml.length-1)==\"\\n\"?ind:\"\") + \"</\" + name + \">\";\n                }\n            }\n            else {\n                xml += ind + \"<\" + name + \">\" + v.toString() +  \"</\" + name + \">\";\n            }\n            return xml;\n        }, xml=\"\";\n        for (var m in o)\n            xml += toXml(o[m], m, \"\");\n        return xml.replace(/\\t|\\n/g, \"\");\n\n    };\n\n}\n\n\n\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            result: ''\n        };\n    }\n\n\n\n    xmlToJSON = (info) => {\n        let xml = info.currentTarget.form[0].value;\n        let result = new Transformer(xml);\n        return this.setState({result: result.xmlToJSON(xml)})\n    };\n\n\n    jsonToXML = (info) => {\n        let json = info.currentTarget.form[0].value;\n        let result = new Transformer(json);\n        return this.setState({result: result.jsonToXML(json)})\n    };\n\n\n  render() {\n    return (\n        <div>\n          <h3>xml to json and reverse</h3>\n            <form>\n                <textarea></textarea>\n                <br/>\n                <button type=\"button\" onClick={this.xmlToJSON}>xml to json</button>\n                <br/>\n                <button type=\"button\" onClick={this.jsonToXML}>json to xml</button>\n            </form>\n\n            <div>\n                {this.state.result}\n            </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}